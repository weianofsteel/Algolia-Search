{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\USER\\\\Desktop\\\\React-instantsearch\\\\component\\\\Algolia\\\\Algolia.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport styles from '../../css/App.module.css';\nimport App from './App';\nimport algoliasearch from 'algoliasearch/lite';\nvar client = algoliasearch('XIMRNVJLQ7', 'c73127fdd3af113650bd9b88eec377b5');\nvar index = client.initIndex('Community_articles_staging');\n\nvar Algolia = function Algolia() {\n  _s();\n\n  var _React$useState = React.useState(''),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      inputValue = _React$useState2[0],\n      setInputValue = _React$useState2[1];\n\n  var _React$useState3 = React.useState(''),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      inputError = _React$useState4[0],\n      setInputError = _React$useState4[1];\n\n  var _React$useState5 = React.useState([]),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      list = _React$useState6[0],\n      setList = _React$useState6[1];\n\n  var handleChange = function handleChange(e) {\n    setInputValue(e.target.value);\n\n    if (e.target.value) {\n      index.search(e.target.value).setSettings({\n        paginationLimitedTo: 6\n      }).then(function (_ref) {\n        var hits = _ref.hits;\n        console.log(hits, 888);\n        setList(hits);\n      })[\"catch\"](function (err) {\n        console.log(err, 777);\n      });\n    } else {\n      setList([]);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.outerBlock,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.block,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.inputBackground,\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: inputValue,\n            className: styles.input,\n            onChange: handleChange,\n            onKeyDown: function onKeyDown() {\n              if (KeyboardEvent.code == 'enter' && !inputValue) {\n                setInputError('Try it!');\n              }\n            } // onKeyPress={this.handleKeyPress.bind(this)}\n            // onFocus={() => !locked && this.setState({ active: true })}\n            // onBlur={() => !locked && this.setState({ active: false })}\n\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 25\n          }, _this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 21\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 17\n      }, _this), /*#__PURE__*/_jsxDEV(App, {\n        inputValue: inputValue,\n        list: list\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 9\n  }, _this);\n};\n\n_s(Algolia, \"l5P+RUNhE5HUmhEet0No8JSoYIo=\");\n\n_c = Algolia;\nexport default Algolia;\n\nvar _c;\n\n$RefreshReg$(_c, \"Algolia\");","map":{"version":3,"sources":["C:/Users/USER/Desktop/React-instantsearch/component/Algolia/Algolia.js"],"names":["React","styles","App","algoliasearch","client","index","initIndex","Algolia","useState","inputValue","setInputValue","inputError","setInputError","list","setList","handleChange","e","target","value","search","setSettings","paginationLimitedTo","then","hits","console","log","err","outerBlock","block","inputBackground","input","KeyboardEvent","code"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,GAAP,MAAgB,OAAhB;AACA,OAAOC,aAAP,MAA0B,oBAA1B;AAEA,IAAMC,MAAM,GAAGD,aAAa,CACxB,YADwB,EAExB,kCAFwB,CAA5B;AAKA,IAAME,KAAK,GAAGD,MAAM,CAACE,SAAP,CAAiB,4BAAjB,CAAd;;AAEA,IAAMC,OAAO,GAAG,SAAVA,OAAU,GAAM;AAAA;;AAAA,wBAEkBP,KAAK,CAACQ,QAAN,CAAe,EAAf,CAFlB;AAAA;AAAA,MAEXC,UAFW;AAAA,MAECC,aAFD;;AAAA,yBAGkBV,KAAK,CAACQ,QAAN,CAAe,EAAf,CAHlB;AAAA;AAAA,MAGXG,UAHW;AAAA,MAGCC,aAHD;;AAAA,yBAIOZ,KAAK,CAACQ,QAAN,CAAe,EAAf,CAJP;AAAA;AAAA,MAIXK,IAJW;AAAA,MAIJC,OAJI;;AAMlB,MAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,CAAD,EAAO;AACxBN,IAAAA,aAAa,CAACM,CAAC,CAACC,MAAF,CAASC,KAAV,CAAb;;AACA,QAAGF,CAAC,CAACC,MAAF,CAASC,KAAZ,EAAkB;AACdb,MAAAA,KAAK,CACJc,MADD,CACQH,CAAC,CAACC,MAAF,CAASC,KADjB,EAECE,WAFD,CAEa;AACTC,QAAAA,mBAAmB,EAAE;AADZ,OAFb,EAKCC,IALD,CAKM,gBAAc;AAAA,YAAXC,IAAW,QAAXA,IAAW;AAChBC,QAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ,EAAkB,GAAlB;AACAT,QAAAA,OAAO,CAACS,IAAD,CAAP;AACH,OARD,WASO,UAAAG,GAAG,EAAI;AACVF,QAAAA,OAAO,CAACC,GAAR,CAAYC,GAAZ,EAAiB,GAAjB;AACH,OAXD;AAYH,KAbD,MAaM;AACFZ,MAAAA,OAAO,CAAC,EAAD,CAAP;AACH;AACJ,GAlBD;;AAoBA,sBACI,QAAC,KAAD,CAAO,QAAP;AAAA,2BACI;AAAK,MAAA,SAAS,EAAEb,MAAM,CAAC0B,UAAvB;AAAA,8BAEI;AAAK,QAAA,SAAS,EAAE1B,MAAM,CAAC2B,KAAvB;AAAA,+BAQI;AAAK,UAAA,SAAS,EAAE3B,MAAM,CAAC4B,eAAvB;AAAA,iCAEI;AACI,YAAA,IAAI,EAAC,MADT;AAEI,YAAA,KAAK,EAAEpB,UAFX;AAGI,YAAA,SAAS,EAAER,MAAM,CAAC6B,KAHtB;AAII,YAAA,QAAQ,EAAEf,YAJd;AAKI,YAAA,SAAS,EAAE,qBAAI;AACX,kBAAGgB,aAAa,CAACC,IAAd,IAAsB,OAAtB,IAAiC,CAACvB,UAArC,EAAgD;AAC5CG,gBAAAA,aAAa,CAAC,SAAD,CAAb;AACH;AACJ,aATL,CAUI;AACA;AACA;;AAZJ;AAAA;AAAA;AAAA;AAAA;AAFJ;AAAA;AAAA;AAAA;AAAA;AARJ;AAAA;AAAA;AAAA;AAAA,eAFJ,eA8BI,QAAC,GAAD;AACI,QAAA,UAAU,EAAEH,UADhB;AAEI,QAAA,IAAI,EAAEI;AAFV;AAAA;AAAA;AAAA;AAAA,eA9BJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,WADJ;AAuCH,CAjED;;GAAMN,O;;KAAAA,O;AAmEN,eAAeA,OAAf","sourcesContent":["import React from 'react'\r\nimport styles from '../../css/App.module.css'\r\nimport App from './App'\r\nimport algoliasearch from 'algoliasearch/lite';\r\n\r\nconst client = algoliasearch(\r\n    'XIMRNVJLQ7',\r\n    'c73127fdd3af113650bd9b88eec377b5'\r\n);\r\n\r\nconst index = client.initIndex('Community_articles_staging');\r\n\r\nconst Algolia = () => {\r\n\r\n    const [inputValue, setInputValue] = React.useState('');\r\n    const [inputError, setInputError] = React.useState('');\r\n    const [list , setList] = React.useState([]);\r\n\r\n    const handleChange = (e) => {\r\n        setInputValue(e.target.value);\r\n        if(e.target.value){\r\n            index\r\n            .search(e.target.value)\r\n            .setSettings({\r\n                paginationLimitedTo: 6\r\n            })\r\n            .then(({ hits }) => {\r\n                console.log(hits, 888);\r\n                setList(hits)\r\n            })\r\n            .catch(err => {\r\n                console.log(err, 777);\r\n            }); \r\n        } else{\r\n            setList([])\r\n        }\r\n    }\r\n\r\n    return(\r\n        <React.Fragment>\r\n            <div className={styles.outerBlock}>\r\n            \r\n                <div className={styles.block}>\r\n                    \r\n                    {/* <div className={styles.header}>\r\n                        <form>\r\n                            <input className={styles.input} type=\"text\"/>\r\n                        </form>\r\n                    </div> */}\r\n\r\n                    <div className={styles.inputBackground}>\r\n                        \r\n                        <input\r\n                            type=\"text\"\r\n                            value={inputValue}\r\n                            className={styles.input}\r\n                            onChange={handleChange}\r\n                            onKeyDown={()=>{\r\n                                if(KeyboardEvent.code == 'enter' && !inputValue){\r\n                                    setInputError('Try it!')\r\n                                }\r\n                            }}\r\n                            // onKeyPress={this.handleKeyPress.bind(this)}\r\n                            // onFocus={() => !locked && this.setState({ active: true })}\r\n                            // onBlur={() => !locked && this.setState({ active: false })}\r\n                        />\r\n\r\n                    </div>\r\n\r\n                </div>\r\n                <App\r\n                    inputValue={inputValue}\r\n                    list={list}\r\n                />\r\n            </div>\r\n        </React.Fragment>\r\n    )\r\n} \r\n\r\nexport default Algolia"]},"metadata":{},"sourceType":"module"}