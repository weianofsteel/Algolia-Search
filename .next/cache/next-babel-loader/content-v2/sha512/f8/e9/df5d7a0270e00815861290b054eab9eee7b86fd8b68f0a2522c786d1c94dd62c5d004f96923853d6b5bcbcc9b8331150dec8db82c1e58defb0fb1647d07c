{"ast":null,"code":"import logger from 'redux-logger';\nimport { applyMiddleware, createStore } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunkMiddleware from 'redux-thunk';\nimport reducer from './reducers';\n\nconst makeConfiguredStore = (reducer, initialState) => createStore(reducer, initialState, composeWithDevTools(applyMiddleware(thunkMiddleware, logger)));\n\nexport const makeStore = initialState => {\n  // we need it only on client side\n  const {\n    persistStore,\n    persistReducer\n  } = require('redux-persist');\n\n  const storage = require('redux-persist/lib/storage').default;\n\n  const persistConfig = {\n    key: 'nextjs',\n    whitelist: ['mode'],\n    // make sure it does not clash with server keys\n    storage\n  };\n  const persistedReducer = persistReducer(persistConfig, reducer);\n  const store = makeConfiguredStore(persistedReducer, initialState);\n  store.__persistor = persistStore(store); // Nasty hack\n\n  window.store = store;\n  return store;\n};","map":{"version":3,"sources":["/Users/wangweian/Desktop/weianwang/redux/redux.js"],"names":["logger","applyMiddleware","createStore","composeWithDevTools","thunkMiddleware","reducer","makeConfiguredStore","initialState","makeStore","persistStore","persistReducer","require","storage","default","persistConfig","key","whitelist","persistedReducer","store","__persistor","window"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,cAAnB;AACA,SAAQC,eAAR,EAAyBC,WAAzB,QAA2C,OAA3C;AACA,SAAQC,mBAAR,QAAkC,0BAAlC;AACA,OAAOC,eAAP,MAA4B,aAA5B;AACA,OAAOC,OAAP,MAAoB,YAApB;;AAEA,MAAMC,mBAAmB,GAAG,CAACD,OAAD,EAAUE,YAAV,KACxBL,WAAW,CACPG,OADO,EAEPE,YAFO,EAGPJ,mBAAmB,CAACF,eAAe,CAACG,eAAD,EAAkBJ,MAAlB,CAAhB,CAHZ,CADf;;AAOA,OAAO,MAAMQ,SAAS,GAAID,YAAD,IAAkB;AAEnC;AACA,QAAM;AAACE,IAAAA,YAAD;AAAeC,IAAAA;AAAf,MAAiCC,OAAO,CAAC,eAAD,CAA9C;;AACA,QAAMC,OAAO,GAAGD,OAAO,CAAC,2BAAD,CAAP,CAAqCE,OAArD;;AAEA,QAAMC,aAAa,GAAG;AAClBC,IAAAA,GAAG,EAAE,QADa;AAElBC,IAAAA,SAAS,EAAE,CAAC,MAAD,CAFO;AAEG;AACrBJ,IAAAA;AAHkB,GAAtB;AAMA,QAAMK,gBAAgB,GAAGP,cAAc,CAACI,aAAD,EAAgBT,OAAhB,CAAvC;AACA,QAAMa,KAAK,GAAGZ,mBAAmB,CAACW,gBAAD,EAAmBV,YAAnB,CAAjC;AAEAW,EAAAA,KAAK,CAACC,WAAN,GAAoBV,YAAY,CAACS,KAAD,CAAhC,CAfmC,CAeM;;AACzCE,EAAAA,MAAM,CAACF,KAAP,GAAeA,KAAf;AACA,SAAOA,KAAP;AACP,CAlBM","sourcesContent":["import logger from 'redux-logger';\nimport {applyMiddleware, createStore} from 'redux';\nimport {composeWithDevTools} from 'redux-devtools-extension';\nimport thunkMiddleware from 'redux-thunk';\nimport reducer from './reducers'\n\nconst makeConfiguredStore = (reducer, initialState) =>\n    createStore(\n        reducer,\n        initialState,\n        composeWithDevTools(applyMiddleware(thunkMiddleware, logger))\n    );\n\nexport const makeStore = (initialState) => {\n\n        // we need it only on client side\n        const {persistStore, persistReducer} = require('redux-persist');\n        const storage = require('redux-persist/lib/storage').default;\n\n        const persistConfig = {\n            key: 'nextjs',\n            whitelist: ['mode'], // make sure it does not clash with server keys\n            storage\n        };\n\n        const persistedReducer = persistReducer(persistConfig, reducer);\n        const store = makeConfiguredStore(persistedReducer, initialState);\n\n        store.__persistor = persistStore(store); // Nasty hack\n        window.store = store;\n        return store;\n};\n"]},"metadata":{},"sourceType":"module"}