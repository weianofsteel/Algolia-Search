{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nvar _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useMemo } from 'react';\nimport { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nvar store;\nvar exampleInitialState = {\n  mode: 'day'\n};\nexport var actionTypes = {\n  DAY: 'DAY',\n  NIGHT: 'NIGHT',\n  RESET: 'RESET'\n}; // REDUCERS\n\nexport var reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : exampleInitialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case actionTypes.DAY:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        mode: 'day'\n      });\n\n    case actionTypes.NIGHT:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        mode: 'night'\n      });\n\n    case actionTypes.RESET:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        mode: 'day'\n      });\n\n    default:\n      return state;\n  }\n}; // ACTIONS\n\nexport var toDay = function toDay() {\n  return {\n    type: actionTypes.DAY\n  };\n};\nexport var toNight = function toNight() {\n  return {\n    type: actionTypes.NIGHT\n  };\n};\nexport var resetCount = function resetCount() {\n  return {\n    type: actionTypes.RESET\n  };\n};\nvar persistConfig = {\n  key: 'primary',\n  storage: storage,\n  whitelist: ['mode'] // place to select which state you want to persist\n\n};\nvar persistedReducer = persistReducer(persistConfig, reducer);\n\nfunction makeStore() {\n  var initialState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : exampleInitialState;\n  return createStore(persistedReducer, initialState, composeWithDevTools(applyMiddleware()));\n}\n\nexport var initializeStore = function initializeStore(preloadedState) {\n  var _store2;\n\n  var _store = (_store2 = store) !== null && _store2 !== void 0 ? _store2 : makeStore(preloadedState); // After navigating to a page with an initial Redux state, merge that state\n  // with the current state in the store, and create a new store\n\n\n  if (preloadedState && store) {\n    _store = makeStore(_objectSpread(_objectSpread({}, store.getState()), preloadedState)); // Reset the current store\n\n    store = undefined;\n  } // For SSG and SSR always create a new store\n\n\n  if (false) return _store; // Create the store once in the client\n\n  if (!store) store = _store;\n  return _store;\n};\nexport function useStore(initialState) {\n  _s();\n\n  var store = useMemo(function () {\n    return initializeStore(initialState);\n  }, [initialState]);\n  return store;\n} // import { useMemo } from 'react'\n// import { createStore, applyMiddleware } from 'redux'\n// import { composeWithDevTools } from 'redux-devtools-extension'\n// let store\n// const initialState = {\n//     mode:'day'\n// }\n// const reducer = (state = initialState, action) => {\n//   switch (action.type) {\n//     case 'DAY':\n//       return {\n//         ...state,\n//         mode: 'day',\n//       }\n//     case 'NIGHT':\n//       return {\n//         ...state,\n//         mode: 'night',\n//       }\n//     case 'RESET':\n//       return {\n//         ...state,\n//       }\n//     default:\n//       return state\n//   }\n// }\n// function initStore(preloadedState = initialState) {\n//   return createStore(\n//     reducer,\n//     preloadedState,\n//     composeWithDevTools(applyMiddleware())\n//   )\n// }\n// export const initializeStore = (preloadedState) => {\n//   let _store = store ?? initStore(preloadedState)\n//   // After navigating to a page with an initial Redux state, merge that state\n//   // with the current state in the store, and create a new store\n//   if (preloadedState && store) {\n//     _store = initStore({\n//       ...store.getState(),\n//       ...preloadedState,\n//     })\n//     // Reset the current store\n//     store = undefined\n//   }\n//   // For SSG and SSR always create a new store\n//   if (typeof window === 'undefined') return _store\n//   // Create the store once in the client\n//   if (!store) store = _store\n//   return _store\n// }\n// export function useStore(initialState) {\n//   const store = useMemo(() => initializeStore(initialState), [initialState])\n//   return store\n// }\n\n_s(useStore, \"K8ucUnUnAgJZGJWAL9Ze8IHCmoQ=\");","map":{"version":3,"sources":["/Users/wangweian/Desktop/weianwang/store.js"],"names":["useMemo","createStore","applyMiddleware","composeWithDevTools","persistReducer","storage","store","exampleInitialState","mode","actionTypes","DAY","NIGHT","RESET","reducer","state","action","type","toDay","toNight","resetCount","persistConfig","key","whitelist","persistedReducer","makeStore","initialState","initializeStore","preloadedState","_store","getState","undefined","useStore"],"mappings":";;;;;;;;AAAA,SAASA,OAAT,QAAwB,OAAxB;AACA,SAASC,WAAT,EAAsBC,eAAtB,QAA6C,OAA7C;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,SAASC,cAAT,QAA+B,eAA/B;AACA,OAAOC,OAAP,MAAoB,2BAApB;AAEA,IAAIC,KAAJ;AAEA,IAAMC,mBAAmB,GAAG;AAC1BC,EAAAA,IAAI,EAAC;AADqB,CAA5B;AAIA,OAAO,IAAMC,WAAW,GAAG;AACzBC,EAAAA,GAAG,EAAE,KADoB;AAEzBC,EAAAA,KAAK,EAAE,OAFkB;AAGzBC,EAAAA,KAAK,EAAE;AAHkB,CAApB,C,CAMP;;AACA,OAAO,IAAMC,OAAO,GAAG,SAAVA,OAAU,GAAyC;AAAA,MAAxCC,KAAwC,uEAAhCP,mBAAgC;AAAA,MAAXQ,MAAW;;AAC9D,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKP,WAAW,CAACC,GAAjB;AACE,6CACKI,KADL;AAEEN,QAAAA,IAAI,EAAE;AAFR;;AAIF,SAAKC,WAAW,CAACE,KAAjB;AACE,6CACKG,KADL;AAEEN,QAAAA,IAAI,EAAE;AAFR;;AAIF,SAAKC,WAAW,CAACG,KAAjB;AACE,6CACKE,KADL;AAEEN,QAAAA,IAAI,EAAE;AAFR;;AAIF;AACE,aAAOM,KAAP;AAjBJ;AAmBD,CApBM,C,CAsBP;;AACA,OAAO,IAAMG,KAAK,GAAG,SAARA,KAAQ,GAAM;AACzB,SAAO;AAAED,IAAAA,IAAI,EAAEP,WAAW,CAACC;AAApB,GAAP;AACD,CAFM;AAIP,OAAO,IAAMQ,OAAO,GAAG,SAAVA,OAAU,GAAM;AAC3B,SAAO;AAAEF,IAAAA,IAAI,EAAEP,WAAW,CAACE;AAApB,GAAP;AACD,CAFM;AAIP,OAAO,IAAMQ,UAAU,GAAG,SAAbA,UAAa,GAAM;AAC9B,SAAO;AAAEH,IAAAA,IAAI,EAAEP,WAAW,CAACG;AAApB,GAAP;AACD,CAFM;AAIP,IAAMQ,aAAa,GAAG;AACpBC,EAAAA,GAAG,EAAE,SADe;AAEpBhB,EAAAA,OAAO,EAAPA,OAFoB;AAGpBiB,EAAAA,SAAS,EAAE,CAAC,MAAD,CAHS,CAGC;;AAHD,CAAtB;AAMA,IAAMC,gBAAgB,GAAGnB,cAAc,CAACgB,aAAD,EAAgBP,OAAhB,CAAvC;;AAEA,SAASW,SAAT,GAAuD;AAAA,MAApCC,YAAoC,uEAArBlB,mBAAqB;AACrD,SAAON,WAAW,CAChBsB,gBADgB,EAEhBE,YAFgB,EAGhBtB,mBAAmB,CAACD,eAAe,EAAhB,CAHH,CAAlB;AAKD;;AAED,OAAO,IAAMwB,eAAe,GAAG,SAAlBA,eAAkB,CAACC,cAAD,EAAoB;AAAA;;AACjD,MAAIC,MAAM,cAAGtB,KAAH,6CAAYkB,SAAS,CAACG,cAAD,CAA/B,CADiD,CAGjD;AACA;;;AACA,MAAIA,cAAc,IAAIrB,KAAtB,EAA6B;AAC3BsB,IAAAA,MAAM,GAAGJ,SAAS,iCACblB,KAAK,CAACuB,QAAN,EADa,GAEbF,cAFa,EAAlB,CAD2B,CAK3B;;AACArB,IAAAA,KAAK,GAAGwB,SAAR;AACD,GAZgD,CAcjD;;;AACA,aAAmC,OAAOF,MAAP,CAfc,CAgBjD;;AACA,MAAI,CAACtB,KAAL,EAAYA,KAAK,GAAGsB,MAAR;AAEZ,SAAOA,MAAP;AACD,CApBM;AAsBP,OAAO,SAASG,QAAT,CAAkBN,YAAlB,EAAgC;AAAA;;AACrC,MAAMnB,KAAK,GAAGN,OAAO,CAAC;AAAA,WAAM0B,eAAe,CAACD,YAAD,CAArB;AAAA,GAAD,EAAsC,CAACA,YAAD,CAAtC,CAArB;AACA,SAAOnB,KAAP;AACD,C,CAGD;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;;GAtEgByB,Q","sourcesContent":["import { useMemo } from 'react'\nimport { createStore, applyMiddleware } from 'redux'\nimport { composeWithDevTools } from 'redux-devtools-extension'\nimport { persistReducer } from 'redux-persist'\nimport storage from 'redux-persist/lib/storage'\n\nlet store\n\nconst exampleInitialState = {\n  mode:'day'\n}\n\nexport const actionTypes = {\n  DAY: 'DAY',\n  NIGHT: 'NIGHT',\n  RESET: 'RESET'\n}\n\n// REDUCERS\nexport const reducer = (state = exampleInitialState, action) => {\n  switch (action.type) {\n    case actionTypes.DAY:\n      return {\n        ...state,\n        mode: 'day'\n      }\n    case actionTypes.NIGHT:\n      return {\n        ...state,\n        mode: 'night'\n      }\n    case actionTypes.RESET:\n      return {\n        ...state,\n        mode: 'day'\n      }\n    default:\n      return state\n  }\n}\n\n// ACTIONS\nexport const toDay = () => {\n  return { type: actionTypes.DAY }\n}\n\nexport const toNight = () => {\n  return { type: actionTypes.NIGHT }\n}\n\nexport const resetCount = () => {\n  return { type: actionTypes.RESET }\n}\n\nconst persistConfig = {\n  key: 'primary',\n  storage,\n  whitelist: ['mode'], // place to select which state you want to persist\n}\n\nconst persistedReducer = persistReducer(persistConfig, reducer)\n\nfunction makeStore(initialState = exampleInitialState) {\n  return createStore(\n    persistedReducer,\n    initialState,\n    composeWithDevTools(applyMiddleware())\n  )\n}\n\nexport const initializeStore = (preloadedState) => {\n  let _store = store ?? makeStore(preloadedState)\n\n  // After navigating to a page with an initial Redux state, merge that state\n  // with the current state in the store, and create a new store\n  if (preloadedState && store) {\n    _store = makeStore({\n      ...store.getState(),\n      ...preloadedState,\n    })\n    // Reset the current store\n    store = undefined\n  }\n\n  // For SSG and SSR always create a new store\n  if (typeof window === 'undefined') return _store\n  // Create the store once in the client\n  if (!store) store = _store\n\n  return _store\n}\n\nexport function useStore(initialState) {\n  const store = useMemo(() => initializeStore(initialState), [initialState])\n  return store\n}\n\n\n// import { useMemo } from 'react'\n// import { createStore, applyMiddleware } from 'redux'\n// import { composeWithDevTools } from 'redux-devtools-extension'\n\n// let store\n\n// const initialState = {\n//     mode:'day'\n// }\n\n// const reducer = (state = initialState, action) => {\n//   switch (action.type) {\n//     case 'DAY':\n//       return {\n//         ...state,\n//         mode: 'day',\n//       }\n//     case 'NIGHT':\n//       return {\n//         ...state,\n//         mode: 'night',\n//       }\n//     case 'RESET':\n//       return {\n//         ...state,\n//       }\n//     default:\n//       return state\n//   }\n// }\n\n// function initStore(preloadedState = initialState) {\n//   return createStore(\n//     reducer,\n//     preloadedState,\n//     composeWithDevTools(applyMiddleware())\n//   )\n// }\n\n// export const initializeStore = (preloadedState) => {\n//   let _store = store ?? initStore(preloadedState)\n\n//   // After navigating to a page with an initial Redux state, merge that state\n//   // with the current state in the store, and create a new store\n//   if (preloadedState && store) {\n//     _store = initStore({\n//       ...store.getState(),\n//       ...preloadedState,\n//     })\n//     // Reset the current store\n//     store = undefined\n//   }\n\n//   // For SSG and SSR always create a new store\n//   if (typeof window === 'undefined') return _store\n//   // Create the store once in the client\n//   if (!store) store = _store\n\n//   return _store\n// }\n\n// export function useStore(initialState) {\n//   const store = useMemo(() => initializeStore(initialState), [initialState])\n//   return store\n// }"]},"metadata":{},"sourceType":"module"}