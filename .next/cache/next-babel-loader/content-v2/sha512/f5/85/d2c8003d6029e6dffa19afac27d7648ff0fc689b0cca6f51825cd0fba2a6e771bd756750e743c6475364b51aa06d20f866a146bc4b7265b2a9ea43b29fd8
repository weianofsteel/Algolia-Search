{"ast":null,"code":"import { createElement as _createElement } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\USER\\\\Desktop\\\\weian\\\\component\\\\Public\\\\PublicComponent.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Select as MaterialSelect, InputLabel, FormControl, MenuItem } from '@material-ui/core';\nimport PropTypes from 'prop-types';\nimport Grid from '@material-ui/core/Grid';\nimport TranslateIcon from '@material-ui/icons/Translate';\nconst useStyles = makeStyles({\n  inputLabel: {\n    fontSize: \"17px\",\n    fontFamily: \"微軟正黑體\",\n    display: \"flex\",\n    flexDirection: \"row-Reverse\"\n  },\n  selectRequired: {// marginLeft:\"-7px\"\n  }\n});\nexport function Select(props) {\n  const classes = useStyles();\n  const {\n    label,\n    value,\n    name,\n    items,\n    formControlProps,\n    selectProps,\n    required,\n    disabled = false,\n    tabIndex = 0,\n    mode\n  } = props;\n\n  let newProps = _objectSpread({}, props);\n\n  delete newProps[\"helperText\"];\n  return /*#__PURE__*/_jsxDEV(FormControl, _objectSpread(_objectSpread({}, formControlProps), {}, {\n    size: \"small\",\n    fullWidth: true,\n    variant: \"outlined\",\n    disabled: disabled,\n    style: {\n      borderColor: 'blue'\n    },\n    children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n      required: required,\n      id: \"demo-simple-select-label\",\n      classes: {\n        root: classes.inputLabel,\n        required: classes.selectRequired\n      },\n      style: {\n        color: mode === 'day' ? '#1F1F1F' : '#FFFFFF'\n      },\n      children: label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(MaterialSelect, _objectSpread(_objectSpread(_objectSpread({}, selectProps), {}, {\n      labelId: \"demo-simple-select-label\",\n      id: \"demo-simple-select\",\n      style: {\n        color: mode === 'day' ? '#1F1F1F' : '#FFFFFF'\n      },\n      inputProps: {\n        name: name,\n        classes: {\n          select: classes.input\n        }\n      },\n      SelectDisplayProps: {\n        tabIndex: tabIndex\n      },\n      value: value === null ? \"\" : value,\n      label: label,\n      displayEmpty: true,\n      renderValue: selected => {\n        function checkEqual(a, b) {\n          if (a === null || a === undefined) {\n            a = \"\";\n          }\n\n          if (b === null || b === undefined) {\n            b = \"\";\n          }\n\n          if (typeof a === \"number\") {\n            a = a.toString();\n          }\n\n          if (typeof b === \"number\") {\n            b = b.toString();\n          }\n\n          return a == b;\n        }\n\n        let filters = items.filter(item => checkEqual(item.value, selected));\n        return filters[0] ? filters[0][\"label\"] : \"\";\n      }\n    }, newProps), {}, {\n      children: items.map(function (item, index) {\n        var _item$props, _item$value, _item$label;\n\n        return /*#__PURE__*/_createElement(MenuItem, _objectSpread(_objectSpread({}, (_item$props = item.props) !== null && _item$props !== void 0 ? _item$props : null), {}, {\n          key: index,\n          value: (_item$value = item.value) !== null && _item$value !== void 0 ? _item$value : \"\",\n          classes: {\n            root: classes.input\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 25\n          }\n        }), (_item$label = item.label) !== null && _item$label !== void 0 ? _item$label : \"\");\n      })\n    }), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this)]\n  }), void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 9\n  }, this);\n}\nexport function Select2(props) {\n  const classes = useStyles();\n  const {\n    label,\n    value,\n    name,\n    items,\n    formControlProps,\n    selectProps,\n    required,\n    disabled = false,\n    tabIndex = 0,\n    mode\n  } = props;\n\n  let newProps = _objectSpread({}, props);\n\n  delete newProps[\"helperText\"];\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    container: true,\n    children: [/*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: 3,\n      style: {\n        marginTop: '1rem'\n      },\n      children: /*#__PURE__*/_jsxDEV(TranslateIcon, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: 1\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: 8,\n      children: /*#__PURE__*/_jsxDEV(FormControl, _objectSpread(_objectSpread({}, formControlProps), {}, {\n        size: \"small\",\n        fullWidth: true,\n        disabled: disabled,\n        children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n          required: required,\n          id: \"demo-simple-select-label\",\n          classes: {\n            root: classes.inputLabel,\n            required: classes.selectRequired\n          },\n          style: {\n            color: mode === 'day' ? '#1F1F1F' : '#FFFFFF'\n          },\n          children: label\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(MaterialSelect, _objectSpread(_objectSpread(_objectSpread({}, selectProps), {}, {\n          labelId: \"demo-simple-select-label\",\n          id: \"demo-simple-select\",\n          style: {\n            color: mode === 'day' ? '#1F1F1F' : '#FFFFFF'\n          },\n          disableUnderline: true,\n          disableRipple: true,\n          inputProps: {\n            name: name,\n            classes: {\n              select: classes.input\n            }\n          },\n          SelectDisplayProps: {\n            tabIndex: tabIndex\n          },\n          value: value === null ? \"\" : value,\n          label: label,\n          displayEmpty: true,\n          renderValue: selected => {\n            function checkEqual(a, b) {\n              if (a === null || a === undefined) {\n                a = \"\";\n              }\n\n              if (b === null || b === undefined) {\n                b = \"\";\n              }\n\n              if (typeof a === \"number\") {\n                a = a.toString();\n              }\n\n              if (typeof b === \"number\") {\n                b = b.toString();\n              }\n\n              return a == b;\n            }\n\n            let filters = items.filter(item => checkEqual(item.value, selected));\n            return filters[0] ? filters[0][\"label\"] : \"\";\n          }\n        }, newProps), {}, {\n          children: items.map(function (item, index) {\n            var _item$props2, _item$value2, _item$label2;\n\n            return /*#__PURE__*/_createElement(MenuItem, _objectSpread(_objectSpread({}, (_item$props2 = item.props) !== null && _item$props2 !== void 0 ? _item$props2 : null), {}, {\n              key: index,\n              value: (_item$value2 = item.value) !== null && _item$value2 !== void 0 ? _item$value2 : \"\",\n              classes: {\n                root: classes.input\n              },\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 210,\n                columnNumber: 29\n              }\n            }), (_item$label2 = item.label) !== null && _item$label2 !== void 0 ? _item$label2 : \"\");\n          })\n        }), void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 17\n        }, this)]\n      }), void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 140,\n    columnNumber: 9\n  }, this);\n}\nSelect.propTypes = {\n  label: PropTypes.string,\n  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\n  onChange: PropTypes.func.isRequired,\n  name: PropTypes.string.isRequired,\n  items: PropTypes.array.isRequired,\n  formControlProps: PropTypes.object,\n  inputLabelProps: PropTypes.object,\n  selectProps: PropTypes.object\n};\nSelect2.propTypes = {\n  label: PropTypes.string,\n  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\n  onChange: PropTypes.func.isRequired,\n  name: PropTypes.string.isRequired,\n  items: PropTypes.array.isRequired,\n  formControlProps: PropTypes.object,\n  inputLabelProps: PropTypes.object,\n  selectProps: PropTypes.object\n};","map":{"version":3,"sources":["C:/Users/USER/Desktop/weian/component/Public/PublicComponent.js"],"names":["makeStyles","Select","MaterialSelect","InputLabel","FormControl","MenuItem","PropTypes","Grid","TranslateIcon","useStyles","inputLabel","fontSize","fontFamily","display","flexDirection","selectRequired","props","classes","label","value","name","items","formControlProps","selectProps","required","disabled","tabIndex","mode","newProps","borderColor","root","color","select","input","selected","checkEqual","a","b","undefined","toString","filters","filter","item","map","index","Select2","marginTop","propTypes","string","oneOfType","number","isRequired","onChange","func","array","object","inputLabelProps"],"mappings":"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","sourcesContent":["import { makeStyles } from '@material-ui/core/styles';\r\nimport { Select as MaterialSelect, InputLabel, FormControl, MenuItem } from '@material-ui/core';\r\nimport PropTypes from 'prop-types';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport TranslateIcon from '@material-ui/icons/Translate';\r\n\r\nconst useStyles = makeStyles({\r\n    inputLabel: {\r\n        fontSize:\"17px\",\r\n        fontFamily:\"微軟正黑體\",\r\n        display: \"flex\",\r\n        flexDirection: \"row-Reverse\"\r\n    },\r\n    selectRequired:{\r\n        // marginLeft:\"-7px\"\r\n    },\r\n})\r\n\r\nexport function Select(props) {\r\n    const classes = useStyles();\r\n    const {\r\n        label,\r\n        value,\r\n        name,\r\n        items,\r\n        formControlProps,\r\n        selectProps,\r\n        required,\r\n        disabled =false,\r\n        tabIndex=0,\r\n        mode\r\n    } = props;\r\n\r\n    let newProps = {\r\n        ...props\r\n    };\r\n    delete newProps[\"helperText\"];\r\n\r\n    return (\r\n        <FormControl\r\n            {...formControlProps}\r\n            size=\"small\"\r\n            fullWidth\r\n            variant=\"outlined\"\r\n            disabled={disabled}\r\n            style={{borderColor:'blue'}}\r\n        >\r\n            <InputLabel\r\n                required={required}\r\n                id=\"demo-simple-select-label\"\r\n                classes={{\r\n                    root:classes.inputLabel,\r\n                    required:classes.selectRequired\r\n                }}\r\n                style={{color:(mode==='day'?'#1F1F1F':'#FFFFFF')}}\r\n            >\r\n                {label}\r\n            </InputLabel>\r\n            <MaterialSelect\r\n                {...selectProps}\r\n                labelId=\"demo-simple-select-label\"\r\n                id=\"demo-simple-select\"\r\n                style={{color:(mode==='day'?'#1F1F1F':'#FFFFFF')}}\r\n                inputProps={{\r\n                    name: name,\r\n                    classes: {select: classes.input},\r\n                }}\r\n                SelectDisplayProps={{\r\n                    tabIndex:tabIndex\r\n                }}\r\n\r\n                value={value===null?\"\":value}\r\n                label={label}\r\n                displayEmpty={true}\r\n                renderValue={selected => {\r\n                    function checkEqual(a,b){\r\n                        if (a === null || a===undefined){\r\n                            a = \"\";\r\n                        }\r\n\r\n                        if (b === null || b ===undefined){\r\n                            b = \"\";\r\n                        }\r\n\r\n                        if (typeof a === \"number\"){\r\n                            a = a.toString();\r\n                        }\r\n\r\n                        if (typeof b === \"number\"){\r\n                            b = b.toString();\r\n                        }\r\n\r\n                        return a == b;\r\n                    }\r\n\r\n                    let filters= items.filter(item=> checkEqual(item.value,selected)  )\r\n\r\n                    return filters[0]?filters[0][\"label\"]:\"\";\r\n                }}\r\n                {...newProps}\r\n            >\r\n                {items.map(function(item,index) {\r\n                    return (\r\n                        <MenuItem\r\n                            {...item.props ?? null}\r\n                            key={index}\r\n                            value={item.value??\"\"}\r\n                            classes={{root:classes.input}}\r\n                        >\r\n                            {item.label??\"\"}\r\n                        </MenuItem>\r\n                    )\r\n                })}\r\n            </MaterialSelect>\r\n        </FormControl>\r\n    );\r\n}\r\n\r\nexport function Select2(props) {\r\n    const classes = useStyles();\r\n    const {\r\n        label,\r\n        value,\r\n        name,\r\n        items,\r\n        formControlProps,\r\n        selectProps,\r\n        required,\r\n        disabled =false,\r\n        tabIndex=0,\r\n        mode\r\n    } = props;\r\n\r\n    let newProps = {\r\n        ...props\r\n    };\r\n    delete newProps[\"helperText\"];\r\n\r\n    return (\r\n        <Grid container>\r\n            <Grid item xs={3} style={{marginTop:'1rem'}}>\r\n                <TranslateIcon/>\r\n            </Grid>\r\n            <Grid item xs={1}></Grid>\r\n            <Grid item xs={8}>\r\n            <FormControl\r\n                {...formControlProps}\r\n                size=\"small\"\r\n                fullWidth\r\n                disabled={disabled}\r\n            >\r\n                <InputLabel\r\n                    required={required}\r\n                    id=\"demo-simple-select-label\"\r\n                    classes={{\r\n                        root:classes.inputLabel,\r\n                        required:classes.selectRequired\r\n                    }}\r\n                    style={{color:(mode==='day'?'#1F1F1F':'#FFFFFF')}}\r\n                >\r\n                    {label}\r\n                </InputLabel>\r\n                <MaterialSelect\r\n                    {...selectProps}\r\n                    labelId=\"demo-simple-select-label\"\r\n                    id=\"demo-simple-select\"\r\n                    style={{color:(mode==='day'?'#1F1F1F':'#FFFFFF')}}\r\n                    disableUnderline\r\n                    disableRipple={true}\r\n                    inputProps={{\r\n                        name: name,\r\n                        classes: {select: classes.input},\r\n                    }}\r\n                    SelectDisplayProps={{\r\n                        tabIndex:tabIndex\r\n                    }}\r\n\r\n                    value={value===null?\"\":value}\r\n                    label={label}\r\n                    displayEmpty={true}\r\n                    renderValue={selected => {\r\n                        function checkEqual(a,b){\r\n                            if (a === null || a===undefined){\r\n                                a = \"\";\r\n                            }\r\n\r\n                            if (b === null || b ===undefined){\r\n                                b = \"\";\r\n                            }\r\n\r\n                            if (typeof a === \"number\"){\r\n                                a = a.toString();\r\n                            }\r\n\r\n                            if (typeof b === \"number\"){\r\n                                b = b.toString();\r\n                            }\r\n\r\n                            return a == b;\r\n                        }\r\n\r\n                        let filters= items.filter(item=> checkEqual(item.value,selected)  )\r\n\r\n                        return filters[0]?filters[0][\"label\"]:\"\";\r\n                    }}\r\n                    {...newProps}\r\n                >\r\n                    {items.map(function(item,index) {\r\n                        return (\r\n                            <MenuItem\r\n                                {...item.props ?? null}\r\n                                key={index}\r\n                                value={item.value??\"\"}\r\n                                classes={{root:classes.input}}\r\n                            >\r\n                                {item.label??\"\"}\r\n                            </MenuItem>\r\n                        )\r\n                    })}\r\n                </MaterialSelect>\r\n            </FormControl>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n}\r\n\r\nSelect.propTypes = {\r\n    label: PropTypes.string,\r\n    value: PropTypes.oneOfType([\r\n        PropTypes.string,\r\n        PropTypes.number\r\n    ]).isRequired,\r\n    onChange: PropTypes.func.isRequired,\r\n    name: PropTypes.string.isRequired,\r\n    items: PropTypes.array.isRequired,\r\n    formControlProps: PropTypes.object,\r\n    inputLabelProps: PropTypes.object,\r\n    selectProps: PropTypes.object\r\n};\r\n\r\nSelect2.propTypes = {\r\n    label: PropTypes.string,\r\n    value: PropTypes.oneOfType([\r\n        PropTypes.string,\r\n        PropTypes.number\r\n    ]).isRequired,\r\n    onChange: PropTypes.func.isRequired,\r\n    name: PropTypes.string.isRequired,\r\n    items: PropTypes.array.isRequired,\r\n    formControlProps: PropTypes.object,\r\n    inputLabelProps: PropTypes.object,\r\n    selectProps: PropTypes.object\r\n};\r\n"]},"metadata":{},"sourceType":"module"}