{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useMemo } from 'react';\nimport { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nlet store;\nconst exampleInitialState = {\n  mode: 'day',\n  lang: 'en',\n  test: ''\n};\nexport const actionTypes = {\n  DAY: 'DAY',\n  NIGHT: 'NIGHT',\n  EN: 'EN',\n  ZHHANT: 'ZHHANT',\n  RESET: 'RESET',\n  TEST: 'TEST'\n}; // REDUCERS\n\nexport const reducer = (state = exampleInitialState, action) => {\n  switch (action.type) {\n    case actionTypes.TEST:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        test: state.value\n      });\n\n    case actionTypes.DAY:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        mode: 'day'\n      });\n\n    case actionTypes.NIGHT:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        mode: 'night'\n      });\n\n    case actionTypes.EN:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        lang: 'en'\n      });\n\n    case actionTypes.ZHHANT:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        lang: 'zhHant'\n      });\n\n    case actionTypes.RESET:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        mode: 'day',\n        lang: 'en'\n      });\n\n    default:\n      return state;\n  }\n}; // ACTIONS\n\nexport const toTest = () => {\n  return {\n    type: actionTypes.TEST\n  };\n};\nexport const toDay = () => {\n  return {\n    type: actionTypes.DAY\n  };\n};\nexport const toNight = () => {\n  return {\n    type: actionTypes.NIGHT\n  };\n};\nexport const toEn = () => {\n  return {\n    type: actionTypes.EN\n  };\n};\nexport const toZhHant = () => {\n  return {\n    type: actionTypes.ZHHANT\n  };\n};\nexport const resetCount = () => {\n  return {\n    type: actionTypes.RESET\n  };\n};\nconst persistConfig = {\n  key: 'primary',\n  storage,\n  whitelist: ['mode', 'lang'] // place to select which state you want to persist\n\n};\nconst persistedReducer = persistReducer(persistConfig, reducer);\n\nfunction makeStore(initialState = exampleInitialState) {\n  return createStore(persistedReducer, initialState, composeWithDevTools(applyMiddleware()));\n}\n\nexport const initializeStore = preloadedState => {\n  var _store2;\n\n  let _store = (_store2 = store) !== null && _store2 !== void 0 ? _store2 : makeStore(preloadedState); // After navigating to a page with an initial Redux state, merge that state\n  // with the current state in the store, and create a new store\n\n\n  if (preloadedState && store) {\n    _store = makeStore(_objectSpread(_objectSpread({}, store.getState()), preloadedState)); // Reset the current store\n\n    store = undefined;\n  } // For SSG and SSR always create a new store\n\n\n  if (true) return _store; // Create the store once in the client\n\n  if (!store) store = _store;\n  return _store;\n};\nexport function useStore(initialState) {\n  const store = useMemo(() => initializeStore(initialState), [initialState]);\n  return store;\n}","map":{"version":3,"sources":["C:/Users/USER/Desktop/React-instantsearch/store.js"],"names":["useMemo","createStore","applyMiddleware","composeWithDevTools","persistReducer","storage","store","exampleInitialState","mode","lang","test","actionTypes","DAY","NIGHT","EN","ZHHANT","RESET","TEST","reducer","state","action","type","value","toTest","toDay","toNight","toEn","toZhHant","resetCount","persistConfig","key","whitelist","persistedReducer","makeStore","initialState","initializeStore","preloadedState","_store","getState","undefined","useStore"],"mappings":"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","sourcesContent":["import { useMemo } from 'react'\r\nimport { createStore, applyMiddleware } from 'redux'\r\nimport { composeWithDevTools } from 'redux-devtools-extension'\r\nimport { persistReducer } from 'redux-persist'\r\nimport storage from 'redux-persist/lib/storage'\r\n\r\nlet store\r\n\r\nconst exampleInitialState = {\r\n  mode:'day',\r\n  lang:'en',\r\n  test:''\r\n}\r\n\r\nexport const actionTypes = {\r\n  DAY: 'DAY',\r\n  NIGHT: 'NIGHT',\r\n  EN: 'EN',\r\n  ZHHANT: 'ZHHANT',\r\n  RESET: 'RESET',\r\n  TEST: 'TEST'\r\n}\r\n\r\n// REDUCERS\r\nexport const reducer = (state = exampleInitialState, action) => {\r\n  switch (action.type) {\r\n    case actionTypes.TEST:\r\n      return {\r\n        ...state,\r\n        test: state.value\r\n      }\r\n    case actionTypes.DAY:\r\n      return {\r\n        ...state,\r\n        mode: 'day'\r\n      }\r\n    case actionTypes.NIGHT:\r\n      return {\r\n        ...state,\r\n        mode: 'night'\r\n      }\r\n    case actionTypes.EN:\r\n      return {\r\n        ...state,\r\n        lang: 'en'\r\n      }\r\n    case actionTypes.ZHHANT:\r\n      return {\r\n        ...state,\r\n        lang: 'zhHant'\r\n      } \r\n    case actionTypes.RESET:\r\n      return {\r\n        ...state,\r\n        mode: 'day',\r\n        lang: 'en'\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\n// ACTIONS\r\nexport const toTest = () => {\r\n  return { type: actionTypes.TEST }\r\n}\r\n\r\nexport const toDay = () => {\r\n  return { type: actionTypes.DAY }\r\n}\r\n\r\nexport const toNight = () => {\r\n  return { type: actionTypes.NIGHT }\r\n}\r\n\r\nexport const toEn = () => {\r\n  return { type: actionTypes.EN }\r\n}\r\n\r\nexport const toZhHant = () => {\r\n  return { type: actionTypes.ZHHANT }\r\n}\r\n\r\nexport const resetCount = () => {\r\n  return { type: actionTypes.RESET }\r\n}\r\n\r\nconst persistConfig = {\r\n  key: 'primary',\r\n  storage,\r\n  whitelist: ['mode', 'lang'], // place to select which state you want to persist\r\n}\r\n\r\nconst persistedReducer = persistReducer(persistConfig, reducer)\r\n\r\nfunction makeStore(initialState = exampleInitialState) {\r\n  return createStore(\r\n    persistedReducer,\r\n    initialState,\r\n    composeWithDevTools(applyMiddleware())\r\n  )\r\n}\r\n\r\nexport const initializeStore = (preloadedState) => {\r\n  let _store = store ?? makeStore(preloadedState)\r\n\r\n  // After navigating to a page with an initial Redux state, merge that state\r\n  // with the current state in the store, and create a new store\r\n  if (preloadedState && store) {\r\n    _store = makeStore({\r\n      ...store.getState(),\r\n      ...preloadedState,\r\n    })\r\n    // Reset the current store\r\n    store = undefined\r\n  }\r\n\r\n  // For SSG and SSR always create a new store\r\n  if (typeof window === 'undefined') return _store\r\n  // Create the store once in the client\r\n  if (!store) store = _store\r\n\r\n  return _store\r\n}\r\n\r\nexport function useStore(initialState) {\r\n  const store = useMemo(() => initializeStore(initialState), [initialState])\r\n  return store\r\n}\r\n"]},"metadata":{},"sourceType":"module"}